#pragma kernel Main

// Variables
RWTexture2D<float4> Result;
int _SizeX, _SizeY;
float _Time;
float2 _MousePos;
int _MouseMode;

// Esta función devuelve el píxel una vez calculado
float4 GetResultPixel(int2 pID_new)
{
	float4 result = Result[pID_new];
    // Descomentar para detectar como paredes los bordes del canvas
	// if( pID_new.x < 0 || pID_new.x >= _Size || pID_new.y < 0 || pID_new.y >= _Size ) result = float4(0,1,1,1);
	return result;
}

// Crea un nuevo pixel en función del modo
void MakeNewPixelObstacle(int2 id)
{
	float4 p = Result[id];

	if(_MouseMode == 0 && p.x == 0 && p.z == 0 ) Result[id] = float4(1,1,0,1); // Crear grano de arena
	else if(_MouseMode == 1) Result[id] = float4(0,1,1,1); // Crear obstáculos
	else if(_MouseMode == 2 && p.x == 0) Result[id] = float4(0,0,0,1); // Borrar obstáculos
}

// Función para generar número aleatorios
float random(float2 st) 
{
	return frac(sin(dot(st.xy,float2(12.9898f, 78.233f)))*43758.5453123f);
}

[numthreads(8,8,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
	// Creamos un nuevo grano u obstáculo
	int2 newPixelID;
	newPixelID.x = _MousePos.x*_SizeX;
	newPixelID.y = _MousePos.y*_SizeY;

	if( _MouseMode != 0)
	{
		// Para los obstáculos creamos una "brochada" más gorda
		float dist = distance(float2(id.xy),float2(newPixelID));
		if(dist < 2.5f) MakeNewPixelObstacle(id.xy);
	}
	else
	{
		MakeNewPixelObstacle(newPixelID); // Grano de arena
	}

	// Simular el movimiento de caída de los granos de arena
	int2 pID = id.xy;
	float4 p = Result[pID]; // Obtenemos el pixel

	if(p.x == 1) // Los granos de arena tienen un componente rojo
	{
		// Simular gravedad
		int2 direction = int2(0 , -1);
		int2 pID_new = pID + direction; // Calculamos su nueva posición
		float4 p_new = GetResultPixel(pID_new);

		// Si hay un grano debajo, mover en eje horizontal de manera aleatoria
		if(p_new.x > 0 || p_new.z > 0)
		{
			direction = int2(sign(random(float2(pID) + _Time)-0.5f) , -1);
			pID_new = pID + direction;
			p_new = GetResultPixel(pID_new);
		}

		//Si no hay grano debajo, colocar vacio (color negro) en la posición anterior
		if(p_new.x == 0 && p_new.z == 0)
		{
			Result[pID_new] = p;
			Result[pID] = float4(0,0,0,1);
		}
	}
}
